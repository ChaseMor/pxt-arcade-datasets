namespace testdata {
    const DATA: Buffer = hex`
        0000f041000020410000a4410000a0410000f040000028410000a04100007841000000000000bc41
        0000b0410000c441000000420000cc41000060400000c44100000000000060410000684100003841
        0000f0400000284100009841000018410000804100003841000030410000e040000070410000e040
        0000c04000000041000002420000024200001a420000f040000058420000b041000050410000c040
        0000404100000000000000000000a0410000f040000040410000d04100000a420000a84100002041
        0000c0400000c041000010410000b040000088410000f040000080410000ac410000f04000003041
        0000dc41000030420000c04100008841000020400000c44100008c4100007041000088410000003f
        000060400000b04100000040000050410000000000008441000070410000e4410000b44100003041
        0000704100002041000084410000a041000080410000003f0000ac41000040400000ec410000c040
        0000f8410000984100006841000000000000d4410000e4410000cc410000f0400000084100005841
        0000b041000060410000803f0000404100000041000050410000a441000008410000844100007841
        0000b441000094410000c03f0000a04000004841000060410000b841000038410000484100008040
        000098410000b841000088410000184100005041000094410000d041000080410000944100009041
        0000f0400000f0400000704100008041000080400000d84100000a420000c0410000c8410000ac41
        000068410000184100008041000080400000f04000008c410000ac4100007041000008410000d441
        00002041000000000000d041000090410000bc410000000000004041000060410000604100009841
        0000f0410000804000006040000060400000d44100005041000090410000e0410000a8410000a441
        0000f040000084410000b0410000dc410000fc4100003841000080400000d0400000804000004041
        000000000000f0410000e04000009841000028410000f8410000000000002040000090400000b040
        0000c040000038410000a84100009841000040410000f84100009041000048410000003f0000a041
        000050410000a44100001841000094410000803f0000cc410000f0400000c03f0000604100004841
        00005841000020410000f84100008841000060400000a0410000d841000090400000384100006841
        0000304100008c410000c4410000bc4100000041000050410000c040000080410000844100004841
        0000c4410000c04000004841000090400000f4410000b0410000e040000018410000cc4100000000
        000020400000c040000058410000d04000000841000058410000b040000058410000404000002841
        0000000000009c4100008c410000ec410000a4410000803f0000b04100004040000080410000b841
        0000bc4100006041000008410000d040000070410000904100009c4100009441000000410000f040
        00002040000048410000a841000058410000e040000098410000ec41000004420000b8410000c441
        00005041000070410000bc41000000000000a841000078410000684100009c410000844100008441
        000098410000604100006841000090410000d0400000e8410000c0410000ec41000048410000b041
        000008410000c44133339f42cdcc9e4233335d4233337b429a999d429a9990426666e641cdcca542
        9a99a2420000a742cdccb4429a99ab42cdcc2e420000a9420000f04100008e426666914233338442
        33336142cdcc7c4233339a420000704266669242cdcc8042cdcc7a429a99554266668f4233335342
        9a994b429a995f423333b2420000b342cdccb84266665a426666c1423333a1426666874233334b42
        333382426666f2413333034266669f429a9961429a9984426666aa426666b642cdcca1429a997b42
        cdcc54423333a6423333714200004c42333397429a995f42666693420000a2423333654266668042
        6666ad426666bd426666a44200009342cdcc1a423333a4423333934233338d42cdcc94423333f741
        6666284233339f4233331d429a9989426666fe41cdcc944233338f426666af429a99a54200008242
        000090429a9975429a99934266669e429a9992429a99f9410000a042cdcc22426666b142cdcc4e42
        cdccb14233339942cdcc8c420000e0419a99ab426666ae426666a9423333594266666442cdcc8842
        9a99a2429a99884200000842cdcc8342666664423333864233339e4266666842cdcc944233339042
        6666a2423333974266660a4233333d429a998342000088426666a24266667e429a99844233332d42
        00009842cdcca142666696429a99714233338842666699423333ab426666924233339c4200009942
        cdcc5a42cdcc584200008f429a999242333331426666ab426666b5426666a6423333a9429a99a042
        9a998c42cdcc6e423333934200003842cdcc6042000097429a99a142cdcc9042cdcc6e429a99ab42
        9a9979423333f7413333a942333397429a99a442cdccf841cdcc81429a998a42cdcc8c4266669942
        6666af42666634420000304233332f423333aa4233338542666696426666ad423333a04266669d42
        00005a42000092429a99a0423333ac420000b242cdcc7c4233332d4233335142cdcc2e4200008242
        6666ea419a99ae4200005e4233339e42333381429a99b3423333f341cdcc244233333d42cdcc4c42
        666652429a9982426666a04200009b42333383423333b1426666974266668542cdcc0042cdcc9c42
        9a99864233339d4233336f4233339842000004420000a742666658420000104233338a4233338442
        00008742333371429a99b1429a99954266662c4266669c426666ab42000038429a99834266668c42
        9a997d4200009542cdcca8426666a7423333694200008842cdcc5042cdcc93429a99974200008842
        9a99a8423333514233338742cdcc40420000b3420000a44266665c42666678420000ad423333f741
        9a992542000052429a99884233335342000066423333874200004242cdcc88429a99274200007842
        3333ef41cdcc9942333396420000b04266669e4233330b42cdcca04200002642cdcc93429a99a342
        cdcca4423333894266666442cdcc504233338d429a9996429a999a42000098429a99634200005e42
        9a99214200008442cdcc9f429a9989429a99594233339a420000b0420000b5423333a6429a99a742
        3333884200008e42cdcca5420000f4419a99a042333390429a998c4200009d42cdcc954266669442
        33339c429a998b4233338d4266669842666650420000ae423333a5423333af42000087423333a142
        9a9967426666a542
    `

    const BYTES_PER_NUMBER: number = 4;
    const HEADER_LENGTH = 2 * BYTES_PER_NUMBER;
    export const NUMBER_OF_STUDENTS: number = DATA.getNumber(NumberFormat.Float32LE, 0);
    export const NUMBER_OF_TESTS: number = DATA.getNumber(NumberFormat.Float32LE, BYTES_PER_NUMBER);

    export function getHoursStudied(student: number, test: number) {
        if (student < 0 || student >= NUMBER_OF_STUDENTS
            || test < 0 || test >= NUMBER_OF_TESTS) {
            return undefined;
        }
        const offset: number = HEADER_LENGTH
            + (student * NUMBER_OF_TESTS + test) * BYTES_PER_NUMBER;
        return DATA.getNumber(NumberFormat.Float32LE, offset);
    }

    export function getTestResults(student: number, test: number) {
        if (student < 0 || student >= NUMBER_OF_STUDENTS
            || test < 0 || test >= NUMBER_OF_TESTS) {
            return undefined;
        }
        const offset: number = HEADER_LENGTH
            + (NUMBER_OF_STUDENTS * NUMBER_OF_TESTS * BYTES_PER_NUMBER)
            + (student * NUMBER_OF_TESTS + test) * BYTES_PER_NUMBER;
        return DATA.getNumber(NumberFormat.Float32LE, offset);

    }
} 